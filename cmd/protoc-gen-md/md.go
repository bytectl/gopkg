package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

var methodSets = make(map[string]int)

// generateFile generates a .http file containing  errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".md"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("- Code generated by protoc-gen-md. DO NOT EDIT.")
	g.P("- Please copy and modify the doc for your needs.")

	generateFileContent(gen, file, g, omitempty)
	return g
}

// generateFileContent generates   errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool) {

	// HTTP Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
		HostString:  "{{host}}",
	}
	for _, method := range service.Methods {
		// drop health
		if strings.HasPrefix(string(method.Desc.Name()), "Health") {
			continue
		}
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(g, method, bind))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(g, method, rule))
		} else if !omitempty {
			path := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
			sd.Methods = append(sd.Methods, buildMethodDesc(g, method, "POST", path))
		}
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute())
	}
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func buildHTTPRule(g *protogen.GeneratedFile, m *protogen.Method, rule *annotations.HttpRule) *methodDesc {
	var (
		path         string
		method       string
		body         string
		responseBody string
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	body = rule.Body
	responseBody = rule.ResponseBody
	md := buildMethodDesc(g, m, method, path)
	if method == "GET" || method == "DELETE" {
		if body != "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s body should not be declared.\n", method, path)
		}
	} else {
		if body == "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s does not declare a body.\n", method, path)
		}
	}

	if responseBody == "*" {
		md.ResponseBody = ""
	} else if responseBody != "" {
		md.ResponseBody = "." + camelCaseVars(responseBody)
	}
	return md
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string) *methodDesc {
	defer func() { methodSets[m.GoName]++ }()

	comments := strings.Split(string(m.Comments.Leading), "\n")
	comment := ""
	description := ""
	if len(comments) == 1 {
		comment = trimComment(comments[0])
	} else if len(comments) > 1 {
		comment = trimComment(comments[0])
		for i := 1; i < len(comments); i++ {
			comments[i] = strings.Trim(comments[i], " ")
		}
		description = strings.Trim(strings.Join(comments[1:], "\n"), " ")
	}

	paramString := ""
	pathParamString := ""
	tableParamString := fieldsToTableParams(m.Input, method)
	param := fieldsToMap(m.Input, method, 0)
	responseParams := fieldsToMap(m.Output, method, 1)

	if len(param) != 0 {
		if method == "GET" || method == "DELETE" {
			pathParamString = "?" + toPathParamString(param)
		} else {
			bs, _ := json.MarshalIndent(param, "", "  ")
			paramString = string(bs)
		}
	}
	responseParamsString := ""
	if len(responseParams) != 0 {
		bs, _ := json.MarshalIndent(responseParams, "", "  ")
		responseParamsString = string(bs)
	}

	return &methodDesc{
		Name:           m.GoName,
		Num:            methodSets[m.GoName],
		Comment:        comment,
		Description:    description,
		Params:         paramString,
		PathParams:     pathParamString,
		TableParams:    tableParamString,
		Path:           path,
		Method:         method,
		ResponseParams: responseParamsString,
	}
}

func fieldsToMap(message *protogen.Message, method string, ptype int32) map[string]interface{} {
	fields := message.Desc.Fields()
	param := map[string]interface{}{}
	for i := 0; i < fields.Len(); i++ {
		fd := fields.Get(i)
		comment := trimComment(message.Fields[i].Comments.Leading.String())
		if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
			m := message.Fields[i].Message

			//if m.Desc.Fields().Get(0).JSONName() != "fields" {
			if m.Desc.FullName() != "google.protobuf.Struct" {
				param[fd.JSONName()] = fieldsToMap(m, method, ptype)
				continue
			} else {
				param[fd.JSONName()] = "struct"
				continue
			}
		}
		value := fd.Kind().String()
		if comment != "" {
			if ptype == 0 {
				if method != "GET" && method != "DELETE" {
					value += " " + comment
				}
			} else {
				value += " " + comment
			}
		}
		param[fd.JSONName()] = value

		// if fd.IsMap() {
		// 	fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a map.\n", fd)
		// } else if fd.IsList() {
		// 	fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a list.\n", fd)
		// } else if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
		// 	// TODOfields = fd.Message().Fields()
		// }
	}
	return param
}

func fieldsToTableParams(message *protogen.Message, method string) string {
	tableParamString := ""
	if method != "GET" && method != "DELETE" {
		return ""
	}
	fields := message.Desc.Fields()
	param := map[string]interface{}{}
	for i := 0; i < fields.Len(); i++ {
		fd := fields.Get(i)
		comment := trimComment(message.Fields[i].Comments.Leading.String())
		if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
			m := message.Fields[i].Message
			if m.Desc.FullName() != "google.protobuf.Struct" {
				continue
			} else {
				param[fd.JSONName()] = "struct"
				continue
			}
		}
		if comment == "" {
			comment = "-"
		}
		tableParamString += fmt.Sprintf("| %v | %v | %v | %v |\n", fd.JSONName(), fd.Kind().String(), "required", comment)

	}
	tableParamString = strings.Trim(tableParamString, "\n")
	return tableParamString
}

func trimComment(comment string) string {
	comment = strings.Replace(comment, "\n", " ", -1)
	comment = strings.Replace(comment, "\t", " ", -1)
	comment = strings.Replace(comment, "//", " ", -1)
	comment = strings.Trim(comment, " ")
	return comment
}
func toPathParamString(params map[string]interface{}) string {
	var ps []string
	for k, v := range params {
		ps = append(ps, fmt.Sprintf("%s=%s", k, v))
	}
	return strings.Join(ps, "&")
}

func camelCaseVars(s string) string {
	subs := strings.Split(s, ".")
	vars := make([]string, 0, len(subs))
	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}
	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercases names, it's extremely unlikely to have two fields
// with different capitalizations.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}
